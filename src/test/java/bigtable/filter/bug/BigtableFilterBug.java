/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bigtable.filter.bug;

import com.google.cloud.bigtable.admin.v2.BigtableTableAdminClient;
import com.google.cloud.bigtable.admin.v2.BigtableTableAdminSettings;
import com.google.cloud.bigtable.admin.v2.models.CreateTableRequest;
import com.google.cloud.bigtable.data.v2.BigtableDataClient;
import com.google.cloud.bigtable.data.v2.BigtableDataSettings;
import com.google.cloud.bigtable.data.v2.models.Filters;
import com.google.cloud.bigtable.data.v2.models.Row;
import com.google.cloud.bigtable.data.v2.models.RowMutation;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.io.IOException;

class BigtableFilterBug {
    public static final String PROJECT = "fakeproject";
    public static final String INSTANCE = "fakeinstance";
    public static final String CITIES_TABLE = "cities";
    public static final String QUARTERS_CF = "quarters";
    static BigTableContainer bigTableContainer = new BigTableContainer();
    static BigtableDataClient client;
    static BigtableTableAdminClient tableAdminClient;

    static {
        bigTableContainer.start();
        Integer port = bigTableContainer.getMappedPort(8086);
        String host = bigTableContainer.getContainerIpAddress();

        try {
            BigtableDataSettings dataSettings = BigtableDataSettings.newBuilderForEmulator(host, port)
                    .setProjectId(PROJECT)
                    .setInstanceId(INSTANCE)
                    .build();
            client = BigtableDataClient.create(dataSettings);
            BigtableTableAdminSettings tableAdminSettings = BigtableTableAdminSettings.newBuilderForEmulator(host, port)
                    .setProjectId(PROJECT)
                    .setInstanceId(INSTANCE)
                    .build();
            tableAdminClient = BigtableTableAdminClient.create(tableAdminSettings);
        } catch (IOException e) {
            e.printStackTrace();
        }
        tableAdminClient.createTable(CreateTableRequest.of(CITIES_TABLE).addFamily(QUARTERS_CF));
    }

    @Test
    void testReadGermanUmlautRow() {
        //given
        String aGermanUmlautKey = "Köln";
        String aGermanUmlautQualifier = "Böcklemünd";

        //when
        RowMutation mut = RowMutation.create(CITIES_TABLE, aGermanUmlautKey)
                .setCell(QUARTERS_CF, aGermanUmlautQualifier, aGermanUmlautQualifier);
        client.mutateRow(mut);

        //then
        Row row = client.readRow(CITIES_TABLE, aGermanUmlautKey);
        Assertions.assertNotNull(row);
        Assertions.assertEquals(row.getKey().toStringUtf8(), aGermanUmlautKey);
        Assertions.assertEquals(row.getCells().get(0).getQualifier().toStringUtf8(), aGermanUmlautQualifier);
    }

    @DisplayName("failing cell qualifier umlaut filter test")
    @Test
    void testReadGermanUmlautCellQualifierWithFilter() { //Failing Test
        //given
        String aGermanUmlautKey = "Köln1";
        String aGermanUmlautQualifier = "Böcklemünd1";

        //when
        RowMutation mut = RowMutation.create(CITIES_TABLE, aGermanUmlautKey)
                .setCell(QUARTERS_CF, aGermanUmlautQualifier, aGermanUmlautQualifier);
        client.mutateRow(mut);

        //then
        Filters.Filter qualifierFilter = Filters.FILTERS.qualifier().exactMatch(aGermanUmlautQualifier);
        Row row = client.readRow(CITIES_TABLE, aGermanUmlautKey, qualifierFilter);

        Assertions.assertNotNull(row);
        Assertions.assertEquals(row.getKey().toStringUtf8(), aGermanUmlautKey);
        Assertions.assertEquals(row.getCells().get(0).getQualifier().toStringUtf8(), aGermanUmlautQualifier);
    }
}
